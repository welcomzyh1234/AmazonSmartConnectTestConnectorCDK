"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const apigateway = require("@aws-cdk/aws-apigateway");
const iam = require("@aws-cdk/aws-iam");
const lambda = require("@aws-cdk/aws-lambda");
const lambda_1 = require("./components/lambda");
const s3_1 = require("./components/s3");
const apigateway_1 = require("./components/apigateway");
const amplify_1 = require("./components/amplify");
const iam_1 = require("./components/iam");
class SmartConnectTestConnectorStack extends cdk.Stack {
    constructor(app, id) {
        super(app, id);
        const iamConstruct = new iam_1.IAMConstruct(this, 'IAM', {
            assumedBy: new iam.CompositePrincipal(new iam.ServicePrincipal('lambda.amazonaws.com'), new iam.ServicePrincipal('apigateway.amazonaws.com')),
            roleName: 'SmartConnectTestConnectorIAMRole'
        });
        new amplify_1.AmplifyConstruct(this, 'Amplify', {
            name: 'SmartConnectTestConnectorAmplifyApp',
            repository: 'https://github.com/welcomzyh1234/AmazonSmartConnectTestConnector.git',
            oauthToken: '645bb5afecc2be8c7c54b2d20acacb7a0ba4cc0d'
        });
        const lambdaArtifactsS3Construct = new s3_1.S3Construct(this, 'S3', {
            bucketName: 'smart-connect-test-connector-lambda-bucket'
        });
        const lambdaConstruct = new lambda_1.LambdaConstruct(this, 'SmartConnectTestConnectorLambda', {
            role: iamConstruct.role,
            lambdaName: 'SmartConnectTestConnectorLambda',
            handler: 'lambda.Handler',
            runtime: lambda.Runtime.JAVA_8,
            isFromS3: true,
            s3BucketArn: 'arn:aws:s3:::smart-connect-test-connector-lambda-bucket',
            s3Key: '6b0c862751b96a76188c8cea6fd3c8b9'
            // isFromS3: false,
            // assetCodePath: 'resources/smart_connect_test_connector_java_lambda'
        });
        const autoDeployLambdaConstruct = new lambda_1.LambdaConstruct(this, 'DeployUpdatedLambdaFromS3', {
            role: iamConstruct.role,
            lambdaName: 'DeployUpdatedLambdaFromS3',
            handler: 'deploy_updated_lambda_function.handler',
            runtime: lambda.Runtime.NODEJS_12_X,
            isFromS3: false,
            assetCodePath: 'resources/deploy_updated_lambda_function',
            environment: {
                TARGET_LAMBDA_FUNCTION_NAME: lambdaConstruct.lambda.functionName
            }
        });
        autoDeployLambdaConstruct.addEventSource(lambdaArtifactsS3Construct.s3);
        const apiGatewayConstruct = new apigateway_1.APIGatewayConstruct(this, 'Apigateway', {
            apiName: 'SmartConnectTestConnectorApi',
            endpointType: apigateway.EndpointType.EDGE,
            cloudWatchRoleArn: iam_1.IAMConstruct.buildApiGatewayCloudWatchRole(this).roleArn
        });
        apiGatewayConstruct.addInventoriesResource(lambdaConstruct.lambda);
        apiGatewayConstruct.addOrderResource(lambdaConstruct.lambda);
        apiGatewayConstruct.addPricesResource(lambdaConstruct.lambda);
        apiGatewayConstruct.addEventsResource(lambdaConstruct.lambda);
    }
}
exports.SmartConnectTestConnectorStack = SmartConnectTestConnectorStack;
const app = new cdk.App();
new SmartConnectTestConnectorStack(app, 'SmartConnectTestConnector');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0QyxzREFBdUQ7QUFDdkQsd0NBQXlDO0FBQ3pDLDhDQUErQztBQUUvQyxnREFBc0Q7QUFDdEQsd0NBQThDO0FBQzlDLHdEQUE4RDtBQUM5RCxrREFBd0Q7QUFDeEQsMENBQWdEO0FBR2hELE1BQWEsOEJBQStCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDM0QsWUFBWSxHQUFZLEVBQUUsRUFBVTtRQUNsQyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWYsTUFBTSxZQUFZLEdBQUcsSUFBSSxrQkFBWSxDQUNuQyxJQUFJLEVBQ0osS0FBSyxFQUNMO1lBQ0UsU0FBUyxFQUFFLElBQUksR0FBRyxDQUFDLGtCQUFrQixDQUNuQyxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQyxFQUNoRCxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQywwQkFBMEIsQ0FBQyxDQUNyRDtZQUNELFFBQVEsRUFBRSxrQ0FBa0M7U0FDN0MsQ0FDRixDQUFDO1FBRUYsSUFBSSwwQkFBZ0IsQ0FDbEIsSUFBSSxFQUNKLFNBQVMsRUFDVDtZQUNFLElBQUksRUFBRSxxQ0FBcUM7WUFDM0MsVUFBVSxFQUFFLHNFQUFzRTtZQUNsRixVQUFVLEVBQUUsMENBQTBDO1NBRXZELENBQ0YsQ0FBQztRQUVGLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSxnQkFBVyxDQUNoRCxJQUFJLEVBQ0osSUFBSSxFQUNKO1lBQ0UsVUFBVSxFQUFFLDRDQUE0QztTQUN6RCxDQUNGLENBQUM7UUFFRixNQUFNLGVBQWUsR0FBRyxJQUFJLHdCQUFlLENBQ3pDLElBQUksRUFDSixpQ0FBaUMsRUFDakM7WUFDRSxJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUk7WUFDdkIsVUFBVSxFQUFFLGlDQUFpQztZQUM3QyxPQUFPLEVBQUUsZ0JBQWdCO1lBQ3pCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU07WUFDOUIsUUFBUSxFQUFFLElBQUk7WUFDZCxXQUFXLEVBQUUseURBQXlEO1lBQ3RFLEtBQUssRUFBRSxrQ0FBa0M7WUFDekMsbUJBQW1CO1lBQ25CLHNFQUFzRTtTQUN2RSxDQUNGLENBQUM7UUFFRixNQUFNLHlCQUF5QixHQUFHLElBQUksd0JBQWUsQ0FDbkQsSUFBSSxFQUNKLDJCQUEyQixFQUMzQjtZQUNFLElBQUksRUFBRSxZQUFZLENBQUMsSUFBSTtZQUN2QixVQUFVLEVBQUUsMkJBQTJCO1lBQ3ZDLE9BQU8sRUFBRSx3Q0FBd0M7WUFDakQsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztZQUNuQyxRQUFRLEVBQUUsS0FBSztZQUNmLGFBQWEsRUFBQywwQ0FBMEM7WUFDeEQsV0FBVyxFQUFFO2dCQUNYLDJCQUEyQixFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUMsWUFBWTthQUNqRTtTQUNGLENBQ0YsQ0FBQztRQUNGLHlCQUF5QixDQUFDLGNBQWMsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV4RSxNQUFNLG1CQUFtQixHQUFHLElBQUksZ0NBQW1CLENBQ2pELElBQUksRUFDSixZQUFZLEVBQ1o7WUFDRSxPQUFPLEVBQUUsOEJBQThCO1lBQ3ZDLFlBQVksRUFBRSxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUk7WUFDMUMsaUJBQWlCLEVBQUUsa0JBQVksQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPO1NBQzVFLENBQ0YsQ0FBQztRQUNGLG1CQUFtQixDQUFDLHNCQUFzQixDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRSxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0QsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlELG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoRSxDQUFDO0NBQ0Y7QUFsRkQsd0VBa0ZDO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsSUFBSSw4QkFBOEIsQ0FBQyxHQUFHLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztBQUNyRSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY29yZScpO1xuaW1wb3J0IGFwaWdhdGV3YXkgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtYXBpZ2F0ZXdheScpO1xuaW1wb3J0IGlhbSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1pYW0nKTtcbmltcG9ydCBsYW1iZGEgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtbGFtYmRhJyk7XG5cbmltcG9ydCB7IExhbWJkYUNvbnN0cnVjdCB9IGZyb20gJy4vY29tcG9uZW50cy9sYW1iZGEnO1xuaW1wb3J0IHsgUzNDb25zdHJ1Y3QgfSBmcm9tICcuL2NvbXBvbmVudHMvczMnO1xuaW1wb3J0IHsgQVBJR2F0ZXdheUNvbnN0cnVjdCB9IGZyb20gJy4vY29tcG9uZW50cy9hcGlnYXRld2F5JztcbmltcG9ydCB7IEFtcGxpZnlDb25zdHJ1Y3QgfSBmcm9tICcuL2NvbXBvbmVudHMvYW1wbGlmeSc7XG5pbXBvcnQgeyBJQU1Db25zdHJ1Y3QgfSBmcm9tICcuL2NvbXBvbmVudHMvaWFtJztcblxuXG5leHBvcnQgY2xhc3MgU21hcnRDb25uZWN0VGVzdENvbm5lY3RvclN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3IoYXBwOiBjZGsuQXBwLCBpZDogc3RyaW5nKSB7XG4gICAgc3VwZXIoYXBwLCBpZCk7XG5cbiAgICBjb25zdCBpYW1Db25zdHJ1Y3QgPSBuZXcgSUFNQ29uc3RydWN0KFxuICAgICAgdGhpcyxcbiAgICAgICdJQU0nLFxuICAgICAge1xuICAgICAgICBhc3N1bWVkQnk6IG5ldyBpYW0uQ29tcG9zaXRlUHJpbmNpcGFsKFxuICAgICAgICAgIG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnbGFtYmRhLmFtYXpvbmF3cy5jb20nKSxcbiAgICAgICAgICBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2FwaWdhdGV3YXkuYW1hem9uYXdzLmNvbScpXG4gICAgICAgICksXG4gICAgICAgIHJvbGVOYW1lOiAnU21hcnRDb25uZWN0VGVzdENvbm5lY3RvcklBTVJvbGUnXG4gICAgICB9XG4gICAgKTtcblxuICAgIG5ldyBBbXBsaWZ5Q29uc3RydWN0KFxuICAgICAgdGhpcyxcbiAgICAgICdBbXBsaWZ5JyxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ1NtYXJ0Q29ubmVjdFRlc3RDb25uZWN0b3JBbXBsaWZ5QXBwJyxcbiAgICAgICAgcmVwb3NpdG9yeTogJ2h0dHBzOi8vZ2l0aHViLmNvbS93ZWxjb216eWgxMjM0L0FtYXpvblNtYXJ0Q29ubmVjdFRlc3RDb25uZWN0b3IuZ2l0JyxcbiAgICAgICAgb2F1dGhUb2tlbjogJzY0NWJiNWFmZWNjMmJlOGM3YzU0YjJkMjBhY2FjYjdhMGJhNGNjMGQnXG5cbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uc3QgbGFtYmRhQXJ0aWZhY3RzUzNDb25zdHJ1Y3QgPSBuZXcgUzNDb25zdHJ1Y3QoXG4gICAgICB0aGlzLFxuICAgICAgJ1MzJyxcbiAgICAgIHtcbiAgICAgICAgYnVja2V0TmFtZTogJ3NtYXJ0LWNvbm5lY3QtdGVzdC1jb25uZWN0b3ItbGFtYmRhLWJ1Y2tldCdcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uc3QgbGFtYmRhQ29uc3RydWN0ID0gbmV3IExhbWJkYUNvbnN0cnVjdChcbiAgICAgIHRoaXMsXG4gICAgICAnU21hcnRDb25uZWN0VGVzdENvbm5lY3RvckxhbWJkYScsXG4gICAgICB7XG4gICAgICAgIHJvbGU6IGlhbUNvbnN0cnVjdC5yb2xlLFxuICAgICAgICBsYW1iZGFOYW1lOiAnU21hcnRDb25uZWN0VGVzdENvbm5lY3RvckxhbWJkYScsXG4gICAgICAgIGhhbmRsZXI6ICdsYW1iZGEuSGFuZGxlcicsXG4gICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLkpBVkFfOCxcbiAgICAgICAgaXNGcm9tUzM6IHRydWUsXG4gICAgICAgIHMzQnVja2V0QXJuOiAnYXJuOmF3czpzMzo6OnNtYXJ0LWNvbm5lY3QtdGVzdC1jb25uZWN0b3ItbGFtYmRhLWJ1Y2tldCcsXG4gICAgICAgIHMzS2V5OiAnNmIwYzg2Mjc1MWI5NmE3NjE4OGM4Y2VhNmZkM2M4YjknXG4gICAgICAgIC8vIGlzRnJvbVMzOiBmYWxzZSxcbiAgICAgICAgLy8gYXNzZXRDb2RlUGF0aDogJ3Jlc291cmNlcy9zbWFydF9jb25uZWN0X3Rlc3RfY29ubmVjdG9yX2phdmFfbGFtYmRhJ1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdCBhdXRvRGVwbG95TGFtYmRhQ29uc3RydWN0ID0gbmV3IExhbWJkYUNvbnN0cnVjdChcbiAgICAgIHRoaXMsXG4gICAgICAnRGVwbG95VXBkYXRlZExhbWJkYUZyb21TMycsXG4gICAgICB7XG4gICAgICAgIHJvbGU6IGlhbUNvbnN0cnVjdC5yb2xlLFxuICAgICAgICBsYW1iZGFOYW1lOiAnRGVwbG95VXBkYXRlZExhbWJkYUZyb21TMycsXG4gICAgICAgIGhhbmRsZXI6ICdkZXBsb3lfdXBkYXRlZF9sYW1iZGFfZnVuY3Rpb24uaGFuZGxlcicsXG4gICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xMl9YLFxuICAgICAgICBpc0Zyb21TMzogZmFsc2UsXG4gICAgICAgIGFzc2V0Q29kZVBhdGg6J3Jlc291cmNlcy9kZXBsb3lfdXBkYXRlZF9sYW1iZGFfZnVuY3Rpb24nLFxuICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgIFRBUkdFVF9MQU1CREFfRlVOQ1RJT05fTkFNRTogbGFtYmRhQ29uc3RydWN0LmxhbWJkYS5mdW5jdGlvbk5hbWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgYXV0b0RlcGxveUxhbWJkYUNvbnN0cnVjdC5hZGRFdmVudFNvdXJjZShsYW1iZGFBcnRpZmFjdHNTM0NvbnN0cnVjdC5zMyk7XG5cbiAgICBjb25zdCBhcGlHYXRld2F5Q29uc3RydWN0ID0gbmV3IEFQSUdhdGV3YXlDb25zdHJ1Y3QoXG4gICAgICB0aGlzLFxuICAgICAgJ0FwaWdhdGV3YXknLFxuICAgICAge1xuICAgICAgICBhcGlOYW1lOiAnU21hcnRDb25uZWN0VGVzdENvbm5lY3RvckFwaScsXG4gICAgICAgIGVuZHBvaW50VHlwZTogYXBpZ2F0ZXdheS5FbmRwb2ludFR5cGUuRURHRSxcbiAgICAgICAgY2xvdWRXYXRjaFJvbGVBcm46IElBTUNvbnN0cnVjdC5idWlsZEFwaUdhdGV3YXlDbG91ZFdhdGNoUm9sZSh0aGlzKS5yb2xlQXJuXG4gICAgICB9XG4gICAgKTtcbiAgICBhcGlHYXRld2F5Q29uc3RydWN0LmFkZEludmVudG9yaWVzUmVzb3VyY2UobGFtYmRhQ29uc3RydWN0LmxhbWJkYSk7XG4gICAgYXBpR2F0ZXdheUNvbnN0cnVjdC5hZGRPcmRlclJlc291cmNlKGxhbWJkYUNvbnN0cnVjdC5sYW1iZGEpO1xuICAgIGFwaUdhdGV3YXlDb25zdHJ1Y3QuYWRkUHJpY2VzUmVzb3VyY2UobGFtYmRhQ29uc3RydWN0LmxhbWJkYSk7XG4gICAgYXBpR2F0ZXdheUNvbnN0cnVjdC5hZGRFdmVudHNSZXNvdXJjZShsYW1iZGFDb25zdHJ1Y3QubGFtYmRhKTtcbiAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xubmV3IFNtYXJ0Q29ubmVjdFRlc3RDb25uZWN0b3JTdGFjayhhcHAsICdTbWFydENvbm5lY3RUZXN0Q29ubmVjdG9yJyk7XG5hcHAuc3ludGgoKTtcbiJdfQ==