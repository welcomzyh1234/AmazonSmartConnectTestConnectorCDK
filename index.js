"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const apigateway = require("@aws-cdk/aws-apigateway");
const iam = require("@aws-cdk/aws-iam");
const lambda = require("@aws-cdk/aws-lambda");
const lambda_1 = require("./components/lambda");
const s3_1 = require("./components/s3");
const apigateway_1 = require("./components/apigateway");
const amplify_1 = require("./components/amplify");
const iam_1 = require("./components/iam");
class SmartConnectTestConnectorStack extends cdk.Stack {
    constructor(app, id) {
        super(app, id);
        const iamConstruct = new iam_1.IAMConstruct(this, 'IAM', {
            assumedBy: new iam.CompositePrincipal(new iam.ServicePrincipal('lambda.amazonaws.com'), new iam.ServicePrincipal('apigateway.amazonaws.com')),
            roleName: 'SmartConnectTestConnectorIAMRole'
        });
        new amplify_1.AmplifyConstruct(this, 'Amplify', {
            name: 'SmartConnectTestConnectorAmplifyApp',
            repository: 'https://github.com/welcomzyh1234/AmazonSmartConnectTestConnector',
            oauthToken: '645bb5afecc2be8c7c54b2d20acacb7a0ba4cc0d'
        });
        const lambdaArtifactsS3Construct = new s3_1.S3Construct(this, 'S3', {
            bucketName: 'smart-connect-test-connector-lambda-bucket'
        });
        const lambdaConstruct = new lambda_1.LambdaConstruct(this, 'SmartConnectTestConnectorLambda', {
            role: iamConstruct.role,
            lambdaName: 'SmartConnectTestConnectorLambda',
            handler: 'lambda.Handler',
            runtime: lambda.Runtime.JAVA_8,
            // isFromS3: true,
            // s3BucketArn: 'arn:aws:s3:::smart-connect-test-connector-lambda-bucket',
            // s3Key: '6b0c862751b96a76188c8cea6fd3c8b9'
            isFromS3: false,
            assetCodePath: 'resources/deploy_updated_lambda_function'
        });
        const autoDeployLambdaConstruct = new lambda_1.LambdaConstruct(this, 'DeployUpdatedLambdaFromS3', {
            role: iamConstruct.role,
            lambdaName: 'DeployUpdatedLambdaFromS3',
            handler: 'deploy_updated_lambda_function.handler',
            runtime: lambda.Runtime.NODEJS_12_X,
            isFromS3: false,
            assetCodePath: 'resources/deploy_updated_lambda_function',
            environment: {
                TARGET_LAMBDA_FUNCTION_NAME: lambdaConstruct.lambda.functionName
            }
        });
        autoDeployLambdaConstruct.addEventSource(lambdaArtifactsS3Construct.s3);
        const apiGatewayConstruct = new apigateway_1.APIGatewayConstruct(this, 'Apigateway', {
            apiName: 'SmartConnectTestConnectorApi',
            endpointType: apigateway.EndpointType.EDGE,
            cloudWatchRoleArn: iam_1.IAMConstruct.buildApiGatewayCloudWatchRole(this).roleArn
        });
        apiGatewayConstruct.addInventoriesResource(lambdaConstruct.lambda);
        apiGatewayConstruct.addOrderResource(lambdaConstruct.lambda);
        apiGatewayConstruct.addPricesResource(lambdaConstruct.lambda);
        apiGatewayConstruct.addEventsResource(lambdaConstruct.lambda);
    }
}
exports.SmartConnectTestConnectorStack = SmartConnectTestConnectorStack;
const app = new cdk.App();
new SmartConnectTestConnectorStack(app, 'SmartConnectTestConnector');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0QyxzREFBdUQ7QUFDdkQsd0NBQXlDO0FBQ3pDLDhDQUErQztBQUUvQyxnREFBc0Q7QUFDdEQsd0NBQThDO0FBQzlDLHdEQUE4RDtBQUM5RCxrREFBd0Q7QUFDeEQsMENBQWdEO0FBR2hELE1BQWEsOEJBQStCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDM0QsWUFBWSxHQUFZLEVBQUUsRUFBVTtRQUNsQyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWYsTUFBTSxZQUFZLEdBQUcsSUFBSSxrQkFBWSxDQUNuQyxJQUFJLEVBQ0osS0FBSyxFQUNMO1lBQ0UsU0FBUyxFQUFFLElBQUksR0FBRyxDQUFDLGtCQUFrQixDQUNuQyxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQyxFQUNoRCxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQywwQkFBMEIsQ0FBQyxDQUNyRDtZQUNELFFBQVEsRUFBRSxrQ0FBa0M7U0FDN0MsQ0FDRixDQUFDO1FBRUYsSUFBSSwwQkFBZ0IsQ0FDbEIsSUFBSSxFQUNKLFNBQVMsRUFDVDtZQUNFLElBQUksRUFBRSxxQ0FBcUM7WUFDM0MsVUFBVSxFQUFFLGtFQUFrRTtZQUM5RSxVQUFVLEVBQUUsMENBQTBDO1NBRXZELENBQ0YsQ0FBQztRQUVGLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSxnQkFBVyxDQUNoRCxJQUFJLEVBQ0osSUFBSSxFQUNKO1lBQ0UsVUFBVSxFQUFFLDRDQUE0QztTQUN6RCxDQUNGLENBQUM7UUFFRixNQUFNLGVBQWUsR0FBRyxJQUFJLHdCQUFlLENBQ3pDLElBQUksRUFDSixpQ0FBaUMsRUFDakM7WUFDRSxJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUk7WUFDdkIsVUFBVSxFQUFFLGlDQUFpQztZQUM3QyxPQUFPLEVBQUUsZ0JBQWdCO1lBQ3pCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU07WUFDOUIsa0JBQWtCO1lBQ2xCLDBFQUEwRTtZQUMxRSw0Q0FBNEM7WUFDNUMsUUFBUSxFQUFFLEtBQUs7WUFDZixhQUFhLEVBQUUsMENBQTBDO1NBQzFELENBQ0YsQ0FBQztRQUVGLE1BQU0seUJBQXlCLEdBQUcsSUFBSSx3QkFBZSxDQUNuRCxJQUFJLEVBQ0osMkJBQTJCLEVBQzNCO1lBQ0UsSUFBSSxFQUFFLFlBQVksQ0FBQyxJQUFJO1lBQ3ZCLFVBQVUsRUFBRSwyQkFBMkI7WUFDdkMsT0FBTyxFQUFFLHdDQUF3QztZQUNqRCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLFFBQVEsRUFBRSxLQUFLO1lBQ2YsYUFBYSxFQUFDLDBDQUEwQztZQUN4RCxXQUFXLEVBQUU7Z0JBQ1gsMkJBQTJCLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxZQUFZO2FBQ2pFO1NBQ0YsQ0FDRixDQUFDO1FBQ0YseUJBQXlCLENBQUMsY0FBYyxDQUFDLDBCQUEwQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXhFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxnQ0FBbUIsQ0FDakQsSUFBSSxFQUNKLFlBQVksRUFDWjtZQUNFLE9BQU8sRUFBRSw4QkFBOEI7WUFDdkMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSTtZQUMxQyxpQkFBaUIsRUFBRSxrQkFBWSxDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU87U0FDNUUsQ0FDRixDQUFDO1FBQ0YsbUJBQW1CLENBQUMsc0JBQXNCLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25FLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3RCxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUQsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Q0FDRjtBQWxGRCx3RUFrRkM7QUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixJQUFJLDhCQUE4QixDQUFDLEdBQUcsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0FBQ3JFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jb3JlJyk7XG5pbXBvcnQgYXBpZ2F0ZXdheSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1hcGlnYXRld2F5Jyk7XG5pbXBvcnQgaWFtID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWlhbScpO1xuaW1wb3J0IGxhbWJkYSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnKTtcblxuaW1wb3J0IHsgTGFtYmRhQ29uc3RydWN0IH0gZnJvbSAnLi9jb21wb25lbnRzL2xhbWJkYSc7XG5pbXBvcnQgeyBTM0NvbnN0cnVjdCB9IGZyb20gJy4vY29tcG9uZW50cy9zMyc7XG5pbXBvcnQgeyBBUElHYXRld2F5Q29uc3RydWN0IH0gZnJvbSAnLi9jb21wb25lbnRzL2FwaWdhdGV3YXknO1xuaW1wb3J0IHsgQW1wbGlmeUNvbnN0cnVjdCB9IGZyb20gJy4vY29tcG9uZW50cy9hbXBsaWZ5JztcbmltcG9ydCB7IElBTUNvbnN0cnVjdCB9IGZyb20gJy4vY29tcG9uZW50cy9pYW0nO1xuXG5cbmV4cG9ydCBjbGFzcyBTbWFydENvbm5lY3RUZXN0Q29ubmVjdG9yU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBjb25zdHJ1Y3RvcihhcHA6IGNkay5BcHAsIGlkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihhcHAsIGlkKTtcblxuICAgIGNvbnN0IGlhbUNvbnN0cnVjdCA9IG5ldyBJQU1Db25zdHJ1Y3QoXG4gICAgICB0aGlzLFxuICAgICAgJ0lBTScsXG4gICAgICB7XG4gICAgICAgIGFzc3VtZWRCeTogbmV3IGlhbS5Db21wb3NpdGVQcmluY2lwYWwoXG4gICAgICAgICAgbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCdsYW1iZGEuYW1hem9uYXdzLmNvbScpLFxuICAgICAgICAgIG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnYXBpZ2F0ZXdheS5hbWF6b25hd3MuY29tJylcbiAgICAgICAgKSxcbiAgICAgICAgcm9sZU5hbWU6ICdTbWFydENvbm5lY3RUZXN0Q29ubmVjdG9ySUFNUm9sZSdcbiAgICAgIH1cbiAgICApO1xuXG4gICAgbmV3IEFtcGxpZnlDb25zdHJ1Y3QoXG4gICAgICB0aGlzLFxuICAgICAgJ0FtcGxpZnknLFxuICAgICAge1xuICAgICAgICBuYW1lOiAnU21hcnRDb25uZWN0VGVzdENvbm5lY3RvckFtcGxpZnlBcHAnLFxuICAgICAgICByZXBvc2l0b3J5OiAnaHR0cHM6Ly9naXRodWIuY29tL3dlbGNvbXp5aDEyMzQvQW1hem9uU21hcnRDb25uZWN0VGVzdENvbm5lY3RvcicsXG4gICAgICAgIG9hdXRoVG9rZW46ICc2NDViYjVhZmVjYzJiZThjN2M1NGIyZDIwYWNhY2I3YTBiYTRjYzBkJ1xuXG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbnN0IGxhbWJkYUFydGlmYWN0c1MzQ29uc3RydWN0ID0gbmV3IFMzQ29uc3RydWN0KFxuICAgICAgdGhpcyxcbiAgICAgICdTMycsXG4gICAgICB7XG4gICAgICAgIGJ1Y2tldE5hbWU6ICdzbWFydC1jb25uZWN0LXRlc3QtY29ubmVjdG9yLWxhbWJkYS1idWNrZXQnXG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbnN0IGxhbWJkYUNvbnN0cnVjdCA9IG5ldyBMYW1iZGFDb25zdHJ1Y3QoXG4gICAgICB0aGlzLFxuICAgICAgJ1NtYXJ0Q29ubmVjdFRlc3RDb25uZWN0b3JMYW1iZGEnLFxuICAgICAge1xuICAgICAgICByb2xlOiBpYW1Db25zdHJ1Y3Qucm9sZSxcbiAgICAgICAgbGFtYmRhTmFtZTogJ1NtYXJ0Q29ubmVjdFRlc3RDb25uZWN0b3JMYW1iZGEnLFxuICAgICAgICBoYW5kbGVyOiAnbGFtYmRhLkhhbmRsZXInLFxuICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5KQVZBXzgsXG4gICAgICAgIC8vIGlzRnJvbVMzOiB0cnVlLFxuICAgICAgICAvLyBzM0J1Y2tldEFybjogJ2Fybjphd3M6czM6OjpzbWFydC1jb25uZWN0LXRlc3QtY29ubmVjdG9yLWxhbWJkYS1idWNrZXQnLFxuICAgICAgICAvLyBzM0tleTogJzZiMGM4NjI3NTFiOTZhNzYxODhjOGNlYTZmZDNjOGI5J1xuICAgICAgICBpc0Zyb21TMzogZmFsc2UsXG4gICAgICAgIGFzc2V0Q29kZVBhdGg6ICdyZXNvdXJjZXMvZGVwbG95X3VwZGF0ZWRfbGFtYmRhX2Z1bmN0aW9uJ1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdCBhdXRvRGVwbG95TGFtYmRhQ29uc3RydWN0ID0gbmV3IExhbWJkYUNvbnN0cnVjdChcbiAgICAgIHRoaXMsXG4gICAgICAnRGVwbG95VXBkYXRlZExhbWJkYUZyb21TMycsXG4gICAgICB7XG4gICAgICAgIHJvbGU6IGlhbUNvbnN0cnVjdC5yb2xlLFxuICAgICAgICBsYW1iZGFOYW1lOiAnRGVwbG95VXBkYXRlZExhbWJkYUZyb21TMycsXG4gICAgICAgIGhhbmRsZXI6ICdkZXBsb3lfdXBkYXRlZF9sYW1iZGFfZnVuY3Rpb24uaGFuZGxlcicsXG4gICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xMl9YLFxuICAgICAgICBpc0Zyb21TMzogZmFsc2UsXG4gICAgICAgIGFzc2V0Q29kZVBhdGg6J3Jlc291cmNlcy9kZXBsb3lfdXBkYXRlZF9sYW1iZGFfZnVuY3Rpb24nLFxuICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgIFRBUkdFVF9MQU1CREFfRlVOQ1RJT05fTkFNRTogbGFtYmRhQ29uc3RydWN0LmxhbWJkYS5mdW5jdGlvbk5hbWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgYXV0b0RlcGxveUxhbWJkYUNvbnN0cnVjdC5hZGRFdmVudFNvdXJjZShsYW1iZGFBcnRpZmFjdHNTM0NvbnN0cnVjdC5zMyk7XG5cbiAgICBjb25zdCBhcGlHYXRld2F5Q29uc3RydWN0ID0gbmV3IEFQSUdhdGV3YXlDb25zdHJ1Y3QoXG4gICAgICB0aGlzLFxuICAgICAgJ0FwaWdhdGV3YXknLFxuICAgICAge1xuICAgICAgICBhcGlOYW1lOiAnU21hcnRDb25uZWN0VGVzdENvbm5lY3RvckFwaScsXG4gICAgICAgIGVuZHBvaW50VHlwZTogYXBpZ2F0ZXdheS5FbmRwb2ludFR5cGUuRURHRSxcbiAgICAgICAgY2xvdWRXYXRjaFJvbGVBcm46IElBTUNvbnN0cnVjdC5idWlsZEFwaUdhdGV3YXlDbG91ZFdhdGNoUm9sZSh0aGlzKS5yb2xlQXJuXG4gICAgICB9XG4gICAgKTtcbiAgICBhcGlHYXRld2F5Q29uc3RydWN0LmFkZEludmVudG9yaWVzUmVzb3VyY2UobGFtYmRhQ29uc3RydWN0LmxhbWJkYSk7XG4gICAgYXBpR2F0ZXdheUNvbnN0cnVjdC5hZGRPcmRlclJlc291cmNlKGxhbWJkYUNvbnN0cnVjdC5sYW1iZGEpO1xuICAgIGFwaUdhdGV3YXlDb25zdHJ1Y3QuYWRkUHJpY2VzUmVzb3VyY2UobGFtYmRhQ29uc3RydWN0LmxhbWJkYSk7XG4gICAgYXBpR2F0ZXdheUNvbnN0cnVjdC5hZGRFdmVudHNSZXNvdXJjZShsYW1iZGFDb25zdHJ1Y3QubGFtYmRhKTtcbiAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xubmV3IFNtYXJ0Q29ubmVjdFRlc3RDb25uZWN0b3JTdGFjayhhcHAsICdTbWFydENvbm5lY3RUZXN0Q29ubmVjdG9yJyk7XG5hcHAuc3ludGgoKTtcbiJdfQ==