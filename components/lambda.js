"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const lambdaEventSources = require("@aws-cdk/aws-lambda-event-sources");
const apiGateway = require("@aws-cdk/aws-apigateway");
const s3 = require("@aws-cdk/aws-s3");
class LambdaConstruct extends core_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.lambda = new lambda.Function(this, 'Function', {
            // code: new lambda.AssetCode('lambdas'),
            code: this.getLambdaCode(props),
            handler: props.handler,
            runtime: props.runtime,
            environment: props.environment,
            timeout: core_1.Duration.seconds(300),
            memorySize: 512,
            role: props.role,
            functionName: props.lambdaName
        });
    }
    getLambdaIntegration() {
        return new apiGateway.LambdaIntegration(this.lambda);
    }
    addEventSource(s3Bucket) {
        this.lambda.addEventSource(new lambdaEventSources.S3EventSource(s3Bucket, { events: [s3.EventType.OBJECT_CREATED] }));
    }
    getLambdaCode(props) {
        if (props.isFromS3) {
            return lambda.S3Code.fromBucket(s3.Bucket.fromBucketArn(this, 'bucket', props.s3BucketArn), props.s3Key);
        }
        return new lambda.AssetCode('lambdas');
    }
}
exports.LambdaConstruct = LambdaConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGFtYmRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQW9EO0FBRXBELDhDQUE4QztBQUM5Qyx3RUFBd0U7QUFDeEUsc0RBQXNEO0FBRXRELHNDQUFzQztBQWV0QyxNQUFhLGVBQWdCLFNBQVEsZ0JBQVM7SUFHNUMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUEyQjtRQUNuRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUMvQixJQUFJLEVBQ0osVUFBVSxFQUNWO1lBQ0UseUNBQXlDO1lBQ3pDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztZQUMvQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixPQUFPLEVBQUUsZUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDOUIsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsWUFBWSxFQUFFLEtBQUssQ0FBQyxVQUFVO1NBQy9CLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTSxvQkFBb0I7UUFDekIsT0FBTyxJQUFJLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVNLGNBQWMsQ0FBQyxRQUFtQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FDeEIsSUFBSSxrQkFBa0IsQ0FBQyxhQUFhLENBQ2xDLFFBQVEsRUFDUixFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUMsQ0FDeEMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVPLGFBQWEsQ0FBQyxLQUEyQjtRQUMvQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDbEIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FDN0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsV0FBWSxDQUFDLEVBQzNELEtBQUssQ0FBQyxLQUFNLENBQ2IsQ0FBQztTQUNIO1FBQ0QsT0FBTyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNGO0FBN0NELDBDQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCwgRHVyYXRpb24gfSBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuXG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSBcIkBhd3MtY2RrL2F3cy1sYW1iZGFcIjtcbmltcG9ydCAqIGFzIGxhbWJkYUV2ZW50U291cmNlcyBmcm9tIFwiQGF3cy1jZGsvYXdzLWxhbWJkYS1ldmVudC1zb3VyY2VzXCI7XG5pbXBvcnQgKiBhcyBhcGlHYXRld2F5IGZyb20gXCJAYXdzLWNkay9hd3MtYXBpZ2F0ZXdheVwiO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gXCJAYXdzLWNkay9hd3MtaWFtXCI7XG5pbXBvcnQgKiBhcyBzMyBmcm9tIFwiQGF3cy1jZGsvYXdzLXMzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGFtYmRhQ29uc3RydWN0UHJvcHMge1xuICByZWFkb25seSBsYW1iZGFOYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGhhbmRsZXI6IHN0cmluZztcbiAgcmVhZG9ubHkgaXNGcm9tUzM6IGJvb2xlYW47XG4gIHJlYWRvbmx5IHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lO1xuICByZWFkb25seSByb2xlOiBpYW0uUm9sZTtcbiAgcmVhZG9ubHkgZW52aXJvbm1lbnQ/OiB7XG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICB9O1xuICByZWFkb25seSBzM0J1Y2tldEFybj86IHN0cmluZyxcbiAgcmVhZG9ubHkgczNLZXk/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGNsYXNzIExhbWJkYUNvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XG4gIHB1YmxpYyByZWFkb25seSBsYW1iZGE6IGxhbWJkYS5GdW5jdGlvbjtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTGFtYmRhQ29uc3RydWN0UHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgdGhpcy5sYW1iZGEgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKFxuICAgICAgdGhpcyxcbiAgICAgICdGdW5jdGlvbicsXG4gICAgICB7XG4gICAgICAgIC8vIGNvZGU6IG5ldyBsYW1iZGEuQXNzZXRDb2RlKCdsYW1iZGFzJyksXG4gICAgICAgIGNvZGU6IHRoaXMuZ2V0TGFtYmRhQ29kZShwcm9wcyksXG4gICAgICAgIGhhbmRsZXI6IHByb3BzLmhhbmRsZXIsXG4gICAgICAgIHJ1bnRpbWU6IHByb3BzLnJ1bnRpbWUsXG4gICAgICAgIGVudmlyb25tZW50OiBwcm9wcy5lbnZpcm9ubWVudCxcbiAgICAgICAgdGltZW91dDogRHVyYXRpb24uc2Vjb25kcygzMDApLFxuICAgICAgICBtZW1vcnlTaXplOiA1MTIsXG4gICAgICAgIHJvbGU6IHByb3BzLnJvbGUsXG4gICAgICAgIGZ1bmN0aW9uTmFtZTogcHJvcHMubGFtYmRhTmFtZVxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TGFtYmRhSW50ZWdyYXRpb24oKTogYXBpR2F0ZXdheS5MYW1iZGFJbnRlZ3JhdGlvbiB7XG4gICAgcmV0dXJuIG5ldyBhcGlHYXRld2F5LkxhbWJkYUludGVncmF0aW9uKHRoaXMubGFtYmRhKTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRFdmVudFNvdXJjZShzM0J1Y2tldDogczMuQnVja2V0KSB7XG4gICAgdGhpcy5sYW1iZGEuYWRkRXZlbnRTb3VyY2UoXG4gICAgICBuZXcgbGFtYmRhRXZlbnRTb3VyY2VzLlMzRXZlbnRTb3VyY2UoXG4gICAgICAgIHMzQnVja2V0LFxuICAgICAgICB7ZXZlbnRzOiBbczMuRXZlbnRUeXBlLk9CSkVDVF9DUkVBVEVEXX1cbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMYW1iZGFDb2RlKHByb3BzOiBMYW1iZGFDb25zdHJ1Y3RQcm9wcyk6IGxhbWJkYS5Db2RlIHtcbiAgICBpZiAocHJvcHMuaXNGcm9tUzMpIHtcbiAgICAgIHJldHVybiBsYW1iZGEuUzNDb2RlLmZyb21CdWNrZXQoXG4gICAgICAgIHMzLkJ1Y2tldC5mcm9tQnVja2V0QXJuKHRoaXMsICdidWNrZXQnLCBwcm9wcy5zM0J1Y2tldEFybiEpLFxuICAgICAgICBwcm9wcy5zM0tleSFcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgbGFtYmRhLkFzc2V0Q29kZSgnbGFtYmRhcycpO1xuICB9XG59Il19