"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const iam = require("@aws-cdk/aws-iam");
class IAMConstruct extends core_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.role = new iam.Role(this, 'Role', props);
        this.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('AWSLambdaFullAccess'));
        this.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonAPIGatewayInvokeFullAccess'));
        this.role.addManagedPolicy(iam.ManagedPolicy.fromManagedPolicyArn(this.role, 'CloudWatchPolicy', 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'));
    }
    static buildApiGatewayCloudWatchRole(scope) {
        const apiGatewayCloudWatchRole = new iam.Role(scope, 'ApiGatewayCloudWatchRole', {
            assumedBy: new iam.ServicePrincipal('apigateway.amazonaws.com'),
            roleName: 'ApiGatewayCloudWatchRole',
        });
        apiGatewayCloudWatchRole.addManagedPolicy(iam.ManagedPolicy.fromManagedPolicyArn(apiGatewayCloudWatchRole, 'CloudWatchPolicy', 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'));
        return apiGatewayCloudWatchRole;
    }
}
exports.IAMConstruct = IAMConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQTBDO0FBRTFDLHdDQUF3QztBQUV4QyxNQUFhLFlBQWEsU0FBUSxnQkFBUztJQUd6QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQW9CO1FBQzVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO1FBQzlGLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUM7UUFDM0csSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FDeEIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FDcEMsSUFBSSxDQUFDLElBQUksRUFDVCxrQkFBa0IsRUFDbEIsMkVBQTJFLENBQzVFLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLENBQUMsNkJBQTZCLENBQUMsS0FBZ0I7UUFDMUQsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQzNDLEtBQUssRUFDTCwwQkFBMEIsRUFDMUI7WUFDRSxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsMEJBQTBCLENBQUM7WUFDL0QsUUFBUSxFQUFFLDBCQUEwQjtTQUNyQyxDQUNGLENBQUM7UUFDRix3QkFBd0IsQ0FBQyxnQkFBZ0IsQ0FDdkMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FDcEMsd0JBQXdCLEVBQ3hCLGtCQUFrQixFQUNsQiwyRUFBMkUsQ0FDNUUsQ0FDRixDQUFDO1FBQ0YsT0FBTyx3QkFBd0IsQ0FBQztJQUNsQyxDQUFDO0NBQ0Y7QUFwQ0Qsb0NBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcIkBhd3MtY2RrL2NvcmVcIjtcblxuaW1wb3J0ICogYXMgaWFtIGZyb20gXCJAYXdzLWNkay9hd3MtaWFtXCI7XG5cbmV4cG9ydCBjbGFzcyBJQU1Db25zdHJ1Y3QgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICBwdWJsaWMgcmVhZG9ubHkgcm9sZTogaWFtLlJvbGU7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IGlhbS5Sb2xlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgdGhpcy5yb2xlID0gbmV3IGlhbS5Sb2xlKHRoaXMsICdSb2xlJywgcHJvcHMpO1xuICAgIHRoaXMucm9sZS5hZGRNYW5hZ2VkUG9saWN5KGlhbS5NYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnQVdTTGFtYmRhRnVsbEFjY2VzcycpKTtcbiAgICB0aGlzLnJvbGUuYWRkTWFuYWdlZFBvbGljeShpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ0FtYXpvbkFQSUdhdGV3YXlJbnZva2VGdWxsQWNjZXNzJykpO1xuICAgIHRoaXMucm9sZS5hZGRNYW5hZ2VkUG9saWN5KFxuICAgICAgaWFtLk1hbmFnZWRQb2xpY3kuZnJvbU1hbmFnZWRQb2xpY3lBcm4oXG4gICAgICAgIHRoaXMucm9sZSxcbiAgICAgICAgJ0Nsb3VkV2F0Y2hQb2xpY3knLFxuICAgICAgICAnYXJuOmF3czppYW06OmF3czpwb2xpY3kvc2VydmljZS1yb2xlL0FtYXpvbkFQSUdhdGV3YXlQdXNoVG9DbG91ZFdhdGNoTG9ncydcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBidWlsZEFwaUdhdGV3YXlDbG91ZFdhdGNoUm9sZShzY29wZTogQ29uc3RydWN0KTogaWFtLlJvbGUge1xuICAgIGNvbnN0IGFwaUdhdGV3YXlDbG91ZFdhdGNoUm9sZSA9IG5ldyBpYW0uUm9sZShcbiAgICAgIHNjb3BlLFxuICAgICAgJ0FwaUdhdGV3YXlDbG91ZFdhdGNoUm9sZScsXG4gICAgICB7XG4gICAgICAgIGFzc3VtZWRCeTogbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCdhcGlnYXRld2F5LmFtYXpvbmF3cy5jb20nKSxcbiAgICAgICAgcm9sZU5hbWU6ICdBcGlHYXRld2F5Q2xvdWRXYXRjaFJvbGUnLFxuICAgICAgfVxuICAgICk7XG4gICAgYXBpR2F0ZXdheUNsb3VkV2F0Y2hSb2xlLmFkZE1hbmFnZWRQb2xpY3koXG4gICAgICBpYW0uTWFuYWdlZFBvbGljeS5mcm9tTWFuYWdlZFBvbGljeUFybihcbiAgICAgICAgYXBpR2F0ZXdheUNsb3VkV2F0Y2hSb2xlLFxuICAgICAgICAnQ2xvdWRXYXRjaFBvbGljeScsXG4gICAgICAgICdhcm46YXdzOmlhbTo6YXdzOnBvbGljeS9zZXJ2aWNlLXJvbGUvQW1hem9uQVBJR2F0ZXdheVB1c2hUb0Nsb3VkV2F0Y2hMb2dzJ1xuICAgICAgKVxuICAgICk7XG4gICAgcmV0dXJuIGFwaUdhdGV3YXlDbG91ZFdhdGNoUm9sZTtcbiAgfVxufSJdfQ==