"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const apiGateway = require("@aws-cdk/aws-apigateway");
class APIGatewayConstruct extends core_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        new apiGateway.CfnAccount(this, 'Account', {
            cloudWatchRoleArn: props.cloudWatchRoleArn
        });
        this.api = new apiGateway.RestApi(this, 'Api', {
            restApiName: props.apiName,
            endpointConfiguration: {
                types: [props.endpointType]
            },
            cloudWatchRole: false // will use exising role <props.cloudWatchRoleArn>
        });
    }
    addInventoriesResource(lambdaFunction) {
        const resource = this.addCorsResource(this.api.root, 'inventories');
        resource.addMethod('GET', new apiGateway.LambdaIntegration(lambdaFunction));
        resource.addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
    }
    addPricesResource(lambdaFunction) {
        const resource = this.addCorsResource(this.api.root, 'prices');
        resource.addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
    }
    addOrderResource(lambdaFunction) {
        const resource = this.addCorsResource(this.api.root, 'orders');
        this.addCorsResource(resource, 'get-order').addMethod('GET', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'list-orders').addMethod('GET', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'confirm-order').addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'create-packages').addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'generate-invoice').addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'generate-ship-label').addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'regenerate-ship-label').addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'reject-order').addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'retrieve-invoice').addMethod('GET', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'retrieve-pickup-slots').addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'retrieve-ship-label').addMethod('GET', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'ship-order').addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
        this.addCorsResource(resource, 'update-packages').addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
    }
    addEventsResource(lambdaFunction) {
        const eventsResource = this.addCorsResource(this.api.root, 'events');
        const subscriptionsResource = this.addCorsResource(eventsResource, 'subscriptions');
        subscriptionsResource.addMethod('GET', new apiGateway.LambdaIntegration(lambdaFunction));
        subscriptionsResource.addMethod('POST', new apiGateway.LambdaIntegration(lambdaFunction));
        subscriptionsResource.addMethod('DELETE', new apiGateway.LambdaIntegration(lambdaFunction));
        subscriptionsResource.addMethod('PUT', new apiGateway.LambdaIntegration(lambdaFunction));
    }
    addCorsResource(parentResource, resourceName) {
        const resource = parentResource.addResource(resourceName);
        this.addCorsOptions(resource);
        return resource;
    }
    addCorsOptions(apiResource) {
        apiResource.addMethod('OPTIONS', new apiGateway.MockIntegration({
            integrationResponses: [{
                    statusCode: '200',
                    responseParameters: {
                        'method.response.header.Access-Control-Allow-Headers': "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amz-Access-Token'",
                        'method.response.header.Access-Control-Allow-Origin': "'*'",
                        'method.response.header.Access-Control-Allow-Credentials': "'false'",
                        'method.response.header.Access-Control-Allow-Methods': "'OPTIONS,GET,PUT,POST,DELETE'",
                    },
                }],
            passthroughBehavior: apiGateway.PassthroughBehavior.NEVER,
            requestTemplates: {
                "application/json": "{\"statusCode\": 200}"
            },
        }), {
            methodResponses: [
                {
                    statusCode: '200',
                    responseParameters: {
                        'method.response.header.Access-Control-Allow-Headers': true,
                        'method.response.header.Access-Control-Allow-Methods': true,
                        'method.response.header.Access-Control-Allow-Credentials': true,
                        'method.response.header.Access-Control-Allow-Origin': true,
                    },
                }
            ]
        });
    }
}
exports.APIGatewayConstruct = APIGatewayConstruct;
//# sourceMappingURL=data:application/json;base64,